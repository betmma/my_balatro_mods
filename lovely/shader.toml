[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Shader testing by injecting into Card.draw. This patch is to remove shadow of phantom (transparent) edition. around applying edition shaders
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if not self.no_shadow and G.SETTINGS.GRAPHICS.shadows == 'On' and((layer == 'shadow' or layer == 'both') and (self.ability.effect ~= 'Glass Card' and not self.greyed) and ((self.area and self.area ~= G.discard and self.area.config.type ~= 'deck') or not self.area or self.states.drag.is)) then"
position = "at"
payload = '''
if not self.no_shadow and G.SETTINGS.GRAPHICS.shadows == 'On' and((layer == 'shadow' or layer == 'both') and (self.ability.effect ~= 'Glass Card' and not self.greyed) and ((self.area and self.area ~= G.discard and self.area.config.type ~= 'deck') or not self.area or self.states.drag.is)) and not (self.edition and self.edition.phantom) then -- edition.phantom is from Betmma
'''
match_indent = true


# Shader testing by injecting into Card.draw. This patch is to remove "main part of the card" that is not transparent (but i doubt if it's really the "main part") 
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif not self.greyed then"
position = "before"
payload = '''
elseif not self.greyed and (get_betmma_shaders and get_betmma_shaders(self)) then 
    --do nothing
'''
match_indent = true


# Shader testing by injecting into Card.draw. This patch is to apply my phantom shader before voucher, booster, edition, seal shaders
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if not self.config.center.discovered and (self.ability.consumeable or self.config.center.unlocked) and not self.config.center.demo and not self.bypass_discovery_center then"
position = "before"
payload = '''
if draw_betmma_shaders~=nil then
    draw_betmma_shaders(self)
end
'''
match_indent = true


# Send real time to fs file in draw_shader function.
[[patches]]
[patches.pattern]
target = "engine/sprite.lua"
pattern = '''G.SHADERS[_shader or 'dissolve']:send("shadow",(not not _shadow_height))'''
position = "after"
payload = '''
if _shader=='tentacle' then
    G.SHADERS[_shader or 'dissolve']:send("real_time",G.TIMERS.REAL - (G.vortex_time or 0))
end
'''
match_indent = true

# Patch to load and apply the cooldown shader
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:draw(layer)"
position = "after"
payload = '''
    local function apply_cooldown_shader(self)
        if self.ability.set=='Ability' and (self.area==G.betmma_abilities or self.area==G.jokers or self.area==G.consumeables or self.area==G.deck or self.area==G.hand) and not ability_cooled_down(self) then
            local _send = self.ARGS.send_to_shader or {}
            _send = {
                betmma = true,
                extra = {
                    {name = 'percentage', val = ability_cooled_down_percentage(self)},
                    {name = 'cooldown', val = {0, 0}}
                },
                vanilla = _send
            }
            self.children.center:draw_shader('cooldown', nil, _send)
            if self.children.front and self.ability.effect ~= 'Stone Card' then
                self.children.front:draw_shader('cooldown', nil, _send)
            end
        end
    end
    apply_cooldown_shader(self)
'''
match_indent = true

# Patch to load the cooldown shader
[[patches]]
[patches.pattern]
target = "main.lua"
pattern = "G.SHADERS = {}"
position = "after"
payload = '''
    function GET_PATH_COMPAT()
        return SMODS.findModByID('BetmmaAbilities').path
    end

    local function betmma_load_shader(v)
        local file = NFS.read(GET_PATH_COMPAT().."/shaders/"..v..".fs")
        love.filesystem.write(v.."-temp.fs", file)
        G.SHADERS[v] = love.graphics.newShader(v.."-temp.fs")
        love.filesystem.remove(v.."-temp.fs")
    end
    betmma_load_shader('cooldown')
'''
match_indent = true